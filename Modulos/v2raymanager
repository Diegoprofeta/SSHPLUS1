#! /bin/bash

# Os arquivos instalados pelo script estão em conformidade com o padrão de hierarquia do sistema de arquivos:
# https://wiki.linuxfoundation.org/lsb/fhs

# A URL do projeto de script é:
# https://github.com/v2fly/fhs-install-v2ray

# A URL do script é:
# https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh

# Se o script for executado incorretamente, vá para:
# https://github.com/v2fly/fhs-install-v2ray/issues

# Se você modificar as seguintes variáveis, você também precisará modificar o arquivo de unidade:
# Você pode modificá-lo para /usr/local/lib/v2ray/
DAT_PATH= ' /usr/local/lib/v2ray/ '
# Você pode modificá-lo para /etc/v2ray/
JSON_PATH= ' /etc/v2ray/ '

check_if_running_as_root () {
    # Se você deseja executar como outro usuário, modifique $UID para ser de propriedade deste usuário
    if [[ " $UID "  -ne  ' 0 ' ]] ;  então
        echo  " erro: Você deve executar este script como root! "
        saída 1
    fi
}

ident_the_operating_system_and_architecture () {
    if [[ " $( uname ) "  ==  ' Linux ' ]] ;  então
        case  " $( uname -m ) "  em
            ' i386 ' | ' i686 ' )
                MÁQUINA = ' 32 '
                ;;
            ' amd64 ' | ' x86_64 ' )
                MÁQUINA = ' 64 '
                ;;
            ' armv5tel ' )
                MÁQUINA= ' arm32-v5 '
                ;;
            ' armv6l ' )
                MÁQUINA= ' arm32-v6 '
                ;;
            ' armv7 ' | ' armv7l ' )
                MÁQUINA = ' arm32-v7a '
                ;;
            ' armv8 ' | ' aarch64 ' )
                MÁQUINA = ' arm64-v8a '
                ;;
            ' mips ' )
                MÁQUINA= ' mips32 '
                ;;
            ' mipsle ' )
                MÁQUINA = ' mips32le '
                ;;
            ' mips64 ' )
                MÁQUINA= ' mips64 '
                ;;
            ' mips64le ' )
                MÁQUINA = ' mips64le '
                ;;
            ' ppc64 ' )
                MÁQUINA= ' ppc64 '
                ;;
            ' ppc64le ' )
                MÁQUINA = ' ppc64le '
                ;;
            ' riscv64 ' )
                MÁQUINA = ' riscv64 '
                ;;
            * )
                echo  " erro: A arquitetura não é suportada. "
                saída 1
                ;;
        esac
        se [[ !  -f  ' /etc/os-release ' ]] ;  então
            echo  " erro: Não use distribuições Linux desatualizadas " .
            saída 1
        fi
        if [[ -z  " $( ls -l /sbin/init | grep systemd ) " ]] ;  então
            echo  " erro: apenas distribuições Linux usando systemd são suportadas. "
            saída 1
        fi
        if [[ " $( command -v apt ) " ]] ;  então
            PACKAGE_MANAGEMENT_INSTALL= ' apt install '
            PACKAGE_MANAGEMENT_REMOVE= ' apt remove '
        elif [[ " $( comando -v yum ) " ]] ;  então
            PACKAGE_MANAGEMENT_INSTALL= ' yum instalar '
            PACKAGE_MANAGEMENT_REMOVE= ' sim remover '
            if [[ " $( comando -v dnf ) " ]] ;  então
                PACKAGE_MANAGEMENT_INSTALL= ' instalar dnf '
                PACKAGE_MANAGEMENT_REMOVE= ' dnf remove '
            fi
        elif [[ " $( comando -v zypper ) " ]] ;  então
            PACKAGE_MANAGEMENT_INSTALL= ' zypper install '
            PACKAGE_MANAGEMENT_REMOVE= ' zypper remove '
        senão
            echo  " erro: O script não suporta o gerenciador de pacotes neste sistema operacional. "
            saída 1
        fi
    senão
        echo  " erro: Este sistema operacional não é suportado. "
        saída 1
    fi
}

julgamento_parâmetros () {
    if [[ " $# "  -gt  ' 0 ' ]] ;  então
        caso  " $1 "  em
            ' --remove ' )
                if [[ " $# "  -gt  ' 1 ' ]] ;  então
                    echo  ' error: Por favor, insira os parâmetros corretos. '
                    saída 1
                fi
                REMOVER = ' 1 '
                ;;
            ' --versão ' )
                if [[ " $# "  -gt  ' 2 ' ]] || [[ -z  " $2 " ]] ;  então
                    echo  ' error: Por favor, especifique a versão correta. '
                    saída 1
                fi
                VERSÃO= " $2 "
                ;;
            ' -c ' | ' --check ' )
                if [[ " $# "  -gt  ' 1 ' ]] ;  então
                    echo  ' error: Por favor, insira os parâmetros corretos. '
                    saída 1
                fi
                VERIFICAR = ' 1 '
                ;;
            ' -f ' | ' --força ' )
                if [[ " $# "  -gt  ' 1 ' ]] ;  então
                    echo  ' error: Por favor, insira os parâmetros corretos. '
                    saída 1
                fi
                FORÇA = ' 1 '
                ;;
            ' -h ' | ' -- ajuda ' )
                if [[ " $# "  -gt  ' 1 ' ]] ;  então
                    echo  ' error: Por favor, insira os parâmetros corretos. '
                    saída 1
                fi
                AJUDA = ' 1 '
                ;;
            ' -l ' | ' --local ' )
                if [[ " $# "  -gt  ' 2 ' ]] || [[ -z  " $2 " ]] ;  então
                    echo  ' error: Por favor, especifique o arquivo local correto. '
                    saída 1
                fi
                LOCAL_FILE= " $2 "
                LOCAL_INSTALL= ' 1 '
                ;;
            ' -p ' | ' --proxy ' )
                caso  " $2 "  em
                    ' http:// ' * )
                        ;;
                    ' https:// ' * )
                        ;;
                    ' meias4:// ' * )
                        ;;
                    ' meias4a:// ' * )
                        ;;
                    ' meias5:// ' * )
                        ;;
                    ' meias5h:// ' * )
                        ;;
                    * )
                        echo  ' error: Por favor, especifique o endereço correto do servidor proxy. '
                        saída 1
                        ;;
                esac
                PROXY= " -x $ 2 "
                # Parâmetros disponíveis através de um servidor proxy
                if [[ " $# "  -gt  ' 2 ' ]] ;  então
                    caso  " $3 "  em
                        ' --versão ' )
                            if [[ " $# "  -gt  ' 4 ' ]] || [[ -z  " $4 " ]] ;  então
                                echo  ' error: Por favor, especifique a versão correta. '
                                saída 1
                            fi
                            VERSÃO= " $2 "
                            ;;
                        ' -c ' | ' --check ' )
                            if [[ " $# "  -gt  ' 3 ' ]] ;  então
                                echo  ' error: Por favor, insira os parâmetros corretos. '
                                saída 1
                            fi
                            VERIFICAR = ' 1 '
                            ;;
                        ' -f ' | ' --força ' )
                            if [[ " $# "  -gt  ' 3 ' ]] ;  então
                                echo  ' error: Por favor, insira os parâmetros corretos. '
                                saída 1
                            fi
                            FORÇA = ' 1 '
                            ;;
                        * )
                            echo  " $ 0 : opção desconhecida -- - "
                            saída 1
                            ;;
                    esac
                fi
                ;;
            * )
                echo  " $ 0 : opção desconhecida -- - "
                saída 1
                ;;
        esac
    fi
}

instalar_software () {
    COMPONENTE = " $ 1 "
    if [[ -n  " ​​$( comando -v " $COMPONENT " ) " ]] ;  então
        Retorna
    fi
    ${PACKAGE_MANAGEMENT_INSTALL}  " $COMPONENT "
    if [[ " $? "  -ne  ' 0 ' ]] ;  então
        echo  " erro: Falha na instalação de $ COMPONENT , verifique sua rede. "
        saída 1
    fi
    echo  " info: $COMPONENT está instalado. "
}

número_versão () {
    caso  " $1 "  em
        ' v ' * )
            echo  " $1 "
            ;;
        * )
            echo  " v $ 1 "
            ;;
    esac
}

get_versão () {
    # 0: Instale ou atualize o V2Ray.
    # 1: Instalado ou sem nova versão do V2Ray.
    # 2: Instale a versão especificada do V2Ray.
    if [[ -z  " $VERSION " ]] ;  então
        # Determine o número da versão do V2Ray instalado a partir de um arquivo local
        if [[ -f  ' /usr/local/bin/v2ray ' ]] ;  então
            VERSION= " $( /usr/local/bin/v2ray -version ) "
            CURRENT_VERSION= " $( version_number $( echo " $ VERSION "  | head -n 1 | awk -F '  '  ' {print $ 2} ' ) ) "
            if [[ " $LOCAL_INSTALL "  -eq  ' 1 ' ]] ;  então
                RELEASE_VERSION= " $CURRENT_VERSION "
                Retorna
            fi
        fi
        # Obtenha o número da versão de lançamento do V2Ray
        TMP_FILE= " $( mktemp ) "
        install_software curl
        # NÃO CITE ESTAS VARIÁVEIS `${PROXY}`!
        se  ! curl ${PROXY} -o " $TMP_FILE "  ' https://api.github.com/repos/v2fly/v2ray-core/releases/latest ' ;  então
            rm " $TMP_FILE "
            echo  ' error: Falha ao obter a lista de lançamentos, verifique sua rede. '
            saída 1
        fi
        RELEASE_LATEST= " $( sed ' s /,/\n/ '  " $TMP_FILE "  | grep ' tag_name '  | awk -F ' " '  ' {print $ 4} ' ) "
        rm " $TMP_FILE "
        RELEASE_VERSION= " $( version_number " $ RELEASE_LATEST " ) "
        # Comparar os números de versão do V2Ray
        if [[ " $RELEASE_VERSION "  !=  " $CURRENT_VERSION " ]] ;  então
            RELEASE_VERSION_NUMBER= " ${RELEASE_VERSION # v} "
            RELEASE_MAJOR_VERSION_NUMBER= " ${RELEASE_VERSION_NUMBER %% . * } "
            RELEASE_MINOR_VERSION_NUMBER= " $( echo " $ RELEASE_VERSION_NUMBER "  | awk -F ' . '  ' {print $ 2} ' ) "
            RELEASE_MINIMUM_VERSION_NUMBER= " ${RELEASE_VERSION_NUMBER ##* .} "
            CURRENT_VERSION_NUMBER= " $( echo " ${CURRENT_VERSION # v} "  | sed ' s/-.*// ' ) "
            CURRENT_MAJOR_VERSION_NUMBER= " ${CURRENT_VERSION_NUMBER %% . * } "
            CURRENT_MINOR_VERSION_NUMBER= " $( echo " $ CURRENT_VERSION_NUMBER "  | awk -F ' . '  ' {print $ 2} ' ) "
            CURRENT_MINIMUM_VERSION_NUMBER= " ${CURRENT_VERSION_NUMBER ##* .} "
            if [[ " $RELEASE_MAJOR_VERSION_NUMBER "  -gt  " $CURRENT_MAJOR_VERSION_NUMBER " ]] ;  então
                retornar 0
            elif [[ " $RELEASE_MAJOR_VERSION_NUMBER "  -eq  " $CURRENT_MAJOR_VERSION_NUMBER " ]] ;  então
                if [[ " $RELEASE_MINOR_VERSION_NUMBER "  -gt  " $CURRENT_MINOR_VERSION_NUMBER " ]] ;  então
                    retornar 0
                elif [[ " $RELEASE_MINOR_VERSION_NUMBER "  -eq  " $CURRENT_MINOR_VERSION_NUMBER " ]] ;  então
                    if [[ " $RELEASE_MINIMUM_VERSION_NUMBER "  -gt  " $CURRENT_MINIMUM_VERSION_NUMBER " ]] ;  então
                        retornar 0
                    senão
                        retornar 1
                    fi
                senão
                    retornar 1
                fi
            senão
                retornar 1
            fi
        elif [[ " $RELEASE_VERSION "  ==  " $CURRENT_VERSION " ]] ;  então
            retornar 1
        fi
    senão
        RELEASE_VERSION= " $( version_number " $ VERSION " ) "
        retornar 2
    fi
}

download_v2ray () {
    mkdir " $TMP_DIRECTORY "
    DOWNLOAD_LINK= " https://github.com/v2fly/v2ray-core/releases/download/ $RELEASE_VERSION /v2ray-linux- $MACHINE .zip "
    echo  " Baixando o arquivo V2Ray: $DOWNLOAD_LINK "
    se  ! curl ${PROXY} -L -H ' Cache-Control: no-cache ' -o " $ZIP_FILE "  " $ DOWNLOAD_LINK " ;  então
        echo  ' erro: Falha no download! Verifique sua rede ou tente novamente. '
        retornar 1
    fi
    echo  " Baixando arquivo de verificação para o arquivo V2Ray: $DOWNLOAD_LINK .dgst "
    se  ! curl ${PROXY} -L -H ' Cache-Control: no-cache ' -o " $ZIP_FILE .dgst "  " $ DOWNLOAD_LINK .dgst " ;  então
        echo  ' erro: Falha no download! Verifique sua rede ou tente novamente. '
        retornar 1
    fi
    if [[ " $( cat " $ ZIP_FILE " .dgst ) "  ==  ' Não encontrado ' ]] ;  então
        echo  ' error: Esta versão não suporta verificação. Substitua por outra versão. '
        retornar 1
    fi

    # Verificação do arquivo V2Ray
    para  LISTSUM  em  ' md5 '  ' sha1 '  ' sha256 '  ' sha512 ' ;  Faz
        SUM= " $( ${LISTSUM} soma " $ ZIP_FILE "  | sed ' s/ .*// ' ) "
        CHECKSUM= " $( grep ${LISTSUM^^}  " $ ZIP_FILE " .dgst | grep " $ SUM " -o -a | uniq ) "
        if [[ " $SUM "  !=  " $CHECKSUM " ]] ;  então
            echo  ' erro: Falha na verificação! Verifique sua rede ou tente novamente. '
            retornar 1
        fi
    feito
}

descompressão () {
    se  ! descompacte -q " $1 " -d " $TMP_DIRECTORY " ;  então
        echo  ' erro: Falha na descompactação do V2Ray. '
        rm -r " $TMP_DIRECTORY "
        echo  " removido: $TMP_DIRECTORY "
        saída 1
    fi
    echo  " info: Extraia o pacote V2Ray para $TMP_DIRECTORY e prepare-o para instalação. "
}

arquivo_instalação () {
    NOME= " $1 "
    if [[ " $NAME "  ==  ' v2ray ' ]] || [[ " $NAME "  ==  ' v2ctl ' ]] ;  então
        install -m 755 " ${TMP_DIRECTORY} $NAME "  " /usr/local/bin/ $NAME "
    elif [[ " $NAME "  ==  ' geoip.dat ' ]] || [[ " $NAME "  ==  ' geosite.dat ' ]] ;  então
        install -m 644 " ${TMP_DIRECTORY} $NAME "  " ${DAT_PATH} $NAME "
    fi
}

install_v2ray () {
    # Instale o binário V2Ray em /usr/local/bin/ e $DAT_PATH
    install_file v2ray
    install_file v2ctl
    install -d " $DAT_PATH "
    # Se o arquivo existir, geoip.dat e geosite.dat não serão instalados ou atualizados
    se [[ !  -f  " ${DAT_PATH} .undat " ]] ;  então
        install_file geoip.dat
        install_file geosite.dat
    fi

    # Instale o arquivo de configuração do V2Ray em $JSON_PATH
    se [[ !  -d  " $JSON_PATH " ]] ;  então
        install -d " $JSON_PATH "
        echo  " {} "  >  " ${JSON_PATH} config.json "
        CONFIG_NEW= ' 1 '
    fi

    # Usado para armazenar arquivos de log do V2Ray
    se [[ !  -d  ' /var/log/v2ray/ ' ]] ;  então
        if [[ -n  " ​​$( id ninguém | grep nogroup ) " ]] ;  então
            install -d -m 755 -o root -g root /var/log/v2ray/
            install -m 644 -o root -g root /dev/null /var/log/v2ray/access.log
            install -m 644 -o root -g root /dev/null /var/log/v2ray/error.log
        senão
            install -d -m 755 -o root -g root /var/log/v2ray/
            install -m 644 -o root -g root /dev/null /var/log/v2ray/access.log
            install -m 644 -o root -g root /dev/null /var/log/v2ray/error.log
        fi
        LOG = ' 1 '
    fi
}

install_startup_service_file () {
    se [[ !  -f  ' /etc/systemd/system/v2ray.service ' ]] ;  então
        mkdir " ${TMP_DIRECTORY} systemd/system/ "
        install_software curl
        cat >  " ${TMP_DIRECTORY} systemd/system/v2ray.service "  << - EOF
[Unidade]
Description=Serviço V2Ray
After=network.target nss-lookup.target
[Serviço]
usuário=raiz
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
Ambiente=V2RAY_LOCATION_ASSET=/usr/local/lib/v2ray/
ExecStart=/usr/local/bin/v2ray run -c /etc/v2ray/config.json
Reiniciar = em caso de falha
[Instalar]
WantedBy=multi-usuário.destino
EOF
        cat >  " ${TMP_DIRECTORY} systemd/system/v2ray@.service "  << - EOF
[Unidade]
Description=Serviço V2Ray
After=network.target nss-lookup.target
[Serviço]
usuário=raiz
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
Ambiente=V2RAY_LOCATION_ASSET=/usr/local/lib/v2ray/
ExecStart=/usr/local/bin/v2ray run -c /etc/v2ray/%i.json
Reiniciar = em caso de falha
[Instalar]
WantedBy=multi-usuário.destino
EOF
        install -m 644 " ${TMP_DIRECTORY} systemd/system/v2ray.service " /etc/systemd/system/v2ray.service
        install -m 644 " ${TMP_DIRECTORY} systemd/system/v2ray@.service " /etc/systemd/system/v2ray@.service
        SISTEMA = ' 1 '
    fi
}

start_v2ray () {
    if [[ -f  ' /etc/systemd/system/v2ray.service ' ]] ;  então
        if [[ -z  " $V2RAY_CUSTOMIZE " ]] ;  então
            systemctl iniciar v2ray
        senão
            systemctl start " $V2RAY_CUSTOMIZE "
        fi
    fi
    if [[ " $? "  -ne 0 ]] ;  então
        echo  ' erro: Falha ao iniciar o serviço V2Ray. '
        saída 1
    fi
    echo  ' info: inicia o serviço V2Ray. '
}

stop_v2ray () {
    V2RAY_CUSTOMIZE= " $( systemctl list-units | grep ' v2ray@ '  | awk -F '  '  ' {print $ 1} ' ) "
    if [[ -z  " $V2RAY_CUSTOMIZE " ]] ;  então
        systemctl parar v2ray
    senão
        systemctl stop " $V2RAY_CUSTOMIZE "
    fi
    if [[ " $? "  -ne  ' 0 ' ]] ;  então
        echo  ' error: Falha ao interromper o serviço V2Ray. '
        saída 1
    fi
    echo  ' info: Interrompe o serviço V2Ray. '
}

check_update () {
    if [[ -f  ' /etc/systemd/system/v2ray.service ' ]] ;  então
        get_version
        if [[ " $? "  -eq  ' 0 ' ]] ;  então
            echo  " info: Encontrou a versão mais recente do V2Ray $RELEASE_VERSION . (Versão atual: $CURRENT_VERSION ) "
        elif [[ " $? "  -eq  ' 1 ' ]] ;  então
            echo  " info: Nenhuma nova versão. A versão atual do V2Ray é $CURRENT_VERSION . "
        fi
        saída 0
    senão
        echo  ' erro: V2Ray não está instalado. '
        saída 1
    fi
}

remove_v2ray () {
    if [[ -n  " ​​$( systemctl list-unit-files | grep ' v2ray ' ) " ]] ;  então
        if [[ -n  " ​​$( pidof v2ray ) " ]] ;  então
            stop_v2ray
        fi
        NOME= " $1 "
        rm /usr/local/bin/v2ray
        rm /usr/local/bin/v2ctl
        rm -r " $DAT_PATH "
        rm /etc/systemd/system/v2ray.service
        rm /etc/systemd/system/v2ray@.service
        if [[ " $? "  -ne  ' 0 ' ]] ;  então
            echo  ' erro: Falha ao remover V2Ray. '
            saída 1
        senão
            echo  ' removido: /usr/local/bin/v2ray '
            echo  ' removido: /usr/local/bin/v2ctl '
            echo  " removido: $DAT_PATH "
            echo  ' removido: /etc/systemd/system/v2ray.service '
            echo  ' removido: /etc/systemd/system/v2ray@.service '
            echo  ' Execute o comando: systemctl disable v2ray '
            echo  " Você pode precisar executar um comando para remover o software dependente: $PACKAGE_MANAGEMENT_REMOVE curl unzip "
            echo  ' info: V2Ray foi removido. '
            echo  ' info: Se necessário, exclua manualmente os arquivos de configuração e log. '
            echo  " informações: por exemplo, $JSON_PATH e /var/log/v2ray/ ... "
            saída 0
        fi
    senão
        echo  ' erro: V2Ray não está instalado. '
        saída 1
    fi
}

# Explicação dos parâmetros no script
show_help () {
    echo  " uso: $0 [--remove | --version number | -c | -f | -h | -l | -p] "
    echo  '   [-p address] [--version number | -c | -f] '
    echo  '   --remove Remove V2Ray '
    echo  '   --version Instala a versão especificada do V2Ray, por exemplo, --version v4.18.0 '
    echo  '   -c, --check Verifica se o V2Ray pode ser atualizado '
    echo  '   -f, --force Força a instalação da última versão do V2Ray '
    echo  '   -h, --help Mostrar ajuda '
    echo  '   -l, --local Instala o V2Ray de um arquivo local '
    echo  '   -p, --proxy Download através de um servidor proxy, por exemplo, -p http://127.0.0.1:8118 ou -p socks5://127.0.0.1:1080 '
    saída 0
}

principal () {
    check_if_running_as_root
    identificar_o_sistema_operacional_e_arquitetura
    julgamento_parâmetros " $@ "

    # Informação do parâmetro
    [[ " $HELP "  -eq  ' 1 ' ]] && show_help
    [[ " $CHECK "  -eq  ' 1 ' ]] && check_update
    [[ " $REMOVE "  -eq  ' 1 ' ]] && remove_v2ray

    # Duas variáveis ​​muito importantes
    TMP_DIRECTORY= " $( mktemp -du ) / "
    ZIP_FILE= " ${TMP_DIRECTORY} v2ray-linux- $MACHINE .zip "

    # Instale o V2Ray de um arquivo local, mas ainda precisa ter certeza de que a rede está disponível
    if [[ " $LOCAL_INSTALL "  -eq  ' 1 ' ]] ;  então
        echo  ' warning: Instale o V2Ray a partir de um arquivo local, mas ainda precisa ter certeza de que a rede está disponível. '
        echo -n ' warning: Verifique se o arquivo é válido porque não podemos confirmá-lo. (Pressione qualquer tecla) ... '
        ler
        descompactar install_software
        mkdir " $TMP_DIRECTORY "
        descompressão " $LOCAL_FILE "
    senão
        # Modo normal
        get_version
        NÚMERO= " $? "
        if [[ " $NUMBER "  -eq  ' 0 ' ]] || [[ " $FORCE "  -eq  ' 1 ' ]] || [[ " $NUMBER "  -eq 2 ]] ;  então
            echo  " info: Instalando o V2Ray $RELEASE_VERSION para $( uname -m ) "
            download_v2ray
            if [[ " $? "  -eq  ' 1 ' ]] ;  então
                rm -r " $TMP_DIRECTORY "
                echo  " removido: $TMP_DIRECTORY "
                saída 0
            fi
            descompactar install_software
            descompactação " $ZIP_FILE "
        elif [[ " $NUMBER "  -eq  ' 1 ' ]] ;  então
            echo  " info: Nenhuma nova versão. A versão atual do V2Ray é $CURRENT_VERSION . "
            saída 0
        fi
    fi

    # Determina se o V2Ray está rodando
    if [[ -n  " ​​$( systemctl list-unit-files | grep ' v2ray ' ) " ]] ;  então
        if [[ -n  " ​​$( pidof v2ray ) " ]] ;  então
            stop_v2ray
            V2RAY_RUNNING= ' 1 '
        fi
    fi
    install_v2ray
    install_startup_service_file
    echo  ' instalado: /usr/local/bin/v2ray '
    echo  ' instalado: /usr/local/bin/v2ctl '
    # Se o arquivo existir, a saída de conteúdo da instalação ou atualização de geoip.dat e geosite.dat não será exibida
    se [[ !  -f  " ${DAT_PATH} .undat " ]] ;  então
        echo  " instalado: ${DAT_PATH} geoip.dat "
        echo  " instalado: ${DAT_PATH} geosite.dat "
    fi
    if [[ " $CONFIG_NEW "  -eq  ' 1 ' ]] ;  então
        echo  " instalado: ${JSON_PATH} config.json "
    fi
    if [[ " $CONFDIR "  -eq  ' 1 ' ]] ;  então
        echo  " instalado: ${JSON_PATH} 00_log.json "
        echo  " instalado: ${JSON_PATH} 01_api.json "
        echo  " instalado: ${JSON_PATH} 02_dns.json "
        echo  " instalado: ${JSON_PATH} 03_routing.json "
        echo  " instalado: ${JSON_PATH} 04_policy.json "
        echo  " instalado: ${JSON_PATH} 05_inbounds.json "
        echo  " instalado: ${JSON_PATH} 06_outbounds.json "
        echo  " instalado: ${JSON_PATH} 07_transport.json "
        echo  " instalado: ${JSON_PATH} 08_stats.json "
        echo  " instalado: ${JSON_PATH} 09_reverse.json "
    fi
    if [[ " $LOG "  -eq  ' 1 ' ]] ;  então
        echo  ' instalado: /var/log/v2ray/ '
        echo  ' instalado: /var/log/v2ray/access.log '
        echo  ' instalado: /var/log/v2ray/error.log '
    fi
    if [[ " $SYSTEMD "  -eq  ' 1 ' ]] ;  então
        echo  ' instalado: /etc/systemd/system/v2ray.service '
        echo  ' instalado: /etc/systemd/system/v2ray@.service '
    fi
    rm -r " $TMP_DIRECTORY "
    echo  " removido: $TMP_DIRECTORY "
    if [[ " $LOCAL_INSTALL "  -eq  ' 1 ' ]] ;  então
        get_version
    fi
    echo  " info: V2Ray $RELEASE_VERSION está instalado. "
    echo  " Você pode precisar executar um comando para remover o software dependente: $PACKAGE_MANAGEMENT_REMOVE curl unzip "
    if [[ " $V2RAY_RUNNING "  -eq  ' 1 ' ]] ;  então
        start_v2ray
    senão
        echo  ' Por favor, execute o comando: systemctl enable v2ray; systemctl iniciar v2ray '
    fi
}

principal " $@ "
